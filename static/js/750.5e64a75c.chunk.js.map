{"version":3,"file":"static/js/750.5e64a75c.chunk.js","mappings":"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","sources":["components/Notification/Notification.jsx","webpack://react-homework-template/./src/components/Form/styles.module.css?5f34","redux/contacts/selectors.js","components/Form/Form.jsx","webpack://react-homework-template/./src/components/Filter/styles.module.css?0bf3","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/StatusBar/StatusBar.module.css?9674","components/StatusBar/StatusBar.jsx","webpack://react-homework-template/./src/components/ContactList/styles.module.css?2090","webpack://react-homework-template/./src/components/ContactRedact/ContactRedact.module.scss?5735","components/ContactRedact/ContactRedact.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.scss?430e","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/Contacts.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\n\nexport const Notification = ({ message }) => (\n  <Typography variant=\"h6\" style={{ textAlign: 'center' }}>\n    {message}\n  </Typography>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"styles_form__cFFCH\",\"submitButton\":\"styles_submitButton__Y16I5\",\"icon\":\"styles_icon__v4Zzc\",\"phoneInputCountry\":\"styles_phoneInputCountry__R21tL\"};","import { createSelector } from '@reduxjs/toolkit';\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter.inputValue;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectSortedAlphabetically = state =>\n  state.filter.sortedAlphabetically;\n\nexport const selectContactsCount = createSelector(\n  [selectContacts],\n  contacts => {\n    return contacts.reduce(\n      (count, contact) => {\n        if (contact.error) {\n          console.log(contact.error);\n        }\n        count.total++;\n        return count;\n      },\n      { total: 0 }\n    );\n  }\n);\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","\n\n\nimport { TiUserAddOutline } from 'react-icons/ti';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport styles from './styles.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts} from 'redux/contacts/selectors';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  \n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    const form = evt?.target;\n    const { name, number } = form.elements;\n    const contactName = name.value;\n    const contactNumber = number.value;\n\n    if (\n      !contacts?.length ||\n      !contacts.some(contact => contact.name === contactName)\n    ) {     \n       dispatch(\n      addContact({\n        name:  contactName,\n        number: contactNumber,\n      })\n    );\n      form.reset();\n    } else {\n      Notify.warning(`${contactName} ${ contactNumber} is already in contacts.`);\n      form.reset();    \n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form}>\n      <label>\n        Name:\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"john doe\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                 \n          required\n        />\n      </label>\n      <label>\n        number:\n        <input\n          type=\"tel\"\n          placeholder=\"+380 33 333 3333\"\n          className={styles.numberInputCountry}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"number number must be digits and can contain spaces, dashes, parentheses and can start with +\"         \n          name=\"number\"          \n          required\n        />\n      </label>\n\n      <button\n        className={styles.submitButton}\n        type=\"submit\"        \n      >\n        add contact\n        <TiUserAddOutline size={20} className={styles.icon} />\n      </button>\n    </form>\n  );\n};\n\n\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"styles_wrapper__3xyTZ\",\"text\":\"styles_text__KOwe7\",\"button\":\"styles_button__2uLTd\",\"icon\":\"styles_icon__Y-780\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport{selectFilter,selectContacts } from 'redux/contacts/selectors'\nimport styles from './styles.module.css';\nimport clearIcon from '../../images/backspace.png';\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const onChange = e => dispatch(setFilter(e.currentTarget.value));\n  return (\n    <div className={styles.wrapper}>\n      <p className={styles.text}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n        placeholder=\"Enter name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        disabled={useSelector(selectContacts).length === 0}\n      />\n      {useSelector(selectFilter) && (\n        <button\n          className={styles.button}\n          type=\"button\"\n          onClick={() => dispatch(setFilter(''))}\n        >\n          <img src={clearIcon} alt=\"clear icon\" className={styles.icon} />\n        </button>\n      )}\n    </div>\n  );\n};\n\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"StatusBar\":\"StatusBar_StatusBar__WIFQY\",\"infoSection\":\"StatusBar_infoSection__9k4Xo\",\"counter\":\"StatusBar_counter__kspNp\",\"counter__header\":\"StatusBar_counter__header__PfH0A\",\"buttons\":\"StatusBar_buttons__zGLId\",\"counter__data\":\"StatusBar_counter__data__4ja6H\",\"button_sort\":\"StatusBar_button_sort__dEa-Y\",\"button_delete\":\"StatusBar_button_delete__mp1OU\",\"icon\":\"StatusBar_icon__9absC\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContactsCount} from 'redux/contacts/selectors';\nimport { sortContactsAz,deleteAllContacts,\n  sortContactsAzReverse,\n } from '../../redux/contacts/contactsSlice';\nimport { Filter } from '../Filter/Filter';\nimport styles from './StatusBar.module.css';\nimport sortIcon from '../../images/sort-az.png';\nimport trashIcon from '../../images/trash.png';\n\nimport { useState } from 'react';\n\nexport const StatusBar = () => {\n  const [sorted, setSorted] = useState({ sortedAlphabetically: false, sortedByDate: false });\n  const dispatch = useDispatch();\n  const { total } = useSelector(selectContactsCount);\n \n  const handleDeleteAllContacts = () => {\n    dispatch(deleteAllContacts());\n  };\n\n  const handleSortAzContacts = () => {\n    if (sorted.sortedAlphabetically) {\n      dispatch(sortContactsAzReverse());\n      setSorted({ sortedAlphabetically: false, sortedByDate: false });\n    } else {\n      dispatch(sortContactsAz());\n      setSorted({ sortedAlphabetically: true, sortedByDate: false });\n    }\n  };\n\n \n\n  return (\n    <div className={styles.StatusBar}>\n      <div className={styles.infoSection}>\n        <div className={styles.counter}>\n         \n          <p className={styles.counter__data}>\n             You have {total} {total === 1 ? 'contact' : 'contacts'}\n          </p>\n        </div>\n        {total > 0 && (\n          <div className={styles.buttons}>\n            <button className={styles.button_sort}\n              type=\"button\"\n              title={sorted.sortedAlphabetically ? 'Sort by name Z-A' : 'Sort by name A-Z'}\n              onClick={handleSortAzContacts}>\n              <img src={sortIcon} alt=\"sort icon\" className={styles.icon} />\n            </button>\n            <button className={styles.button_delete}\n              type=\"button\"\n              title='Delete All Contacts'\n              onClick={handleDeleteAllContacts}>\n              <img src={trashIcon} alt=\"trash icon\" className={styles.icon} />\n            </button>\n            {/* <button\n              className={styles.button_sort}\n              type=\"button\"              \n              title={sorted.sortedByDate ? 'Sort by date added reverse' : 'Sort by date added'}\n              onClick={handleSortDateContacts}\n            >\n              <img src={ sortDateIcon} alt=\"sort date icon\" className={styles.icon} />\n            </button> */}\n          </div>\n        )}\n      </div>\n      <Filter />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"styles_contactsList__RVAEk\",\"phoneNumber\":\"styles_phoneNumber__iEK03\",\"contactName\":\"styles_contactName__4m75C\",\"listItem\":\"styles_listItem__iM5fE\",\"telephone_icon\":\"styles_telephone_icon__cViq3\",\"user_icon\":\"styles_user_icon__OkL1E\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactRedact_form__Z6ZRp\",\"buttons\":\"ContactRedact_buttons__Klsmw\",\"backspaceIconName\":\"ContactRedact_backspaceIconName__LpYW8\",\"backspaceIconPhone\":\"ContactRedact_backspaceIconPhone__uycOL\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { editContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport BackspaceIcon from '@mui/icons-material/Backspace';\nimport SaveIcon from '@mui/icons-material/Save';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport css from './ContactRedact.module.scss';\n\nexport const ContactRedact = ({ contact, handleClose }) => {\n  const [name, setName] = useState(contact.name);\n  const [phone, setPhone] = useState(contact.number);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n  const handleNumberChange = event => {\n    setPhone(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contactsWithoutCurrent = contacts.filter(item => item.id !== contact.id);\n\n    const isContactExist = contactsWithoutCurrent.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    const isPhoneExist = contactsWithoutCurrent.find(\n      contact => contact.number.replace(/[^0-9]+/g, '') === phone.replace(/[^0-9]+/g, '')\n    );\n    if (isContactExist) {\n      alert(`User ${name} is already in contacts`);\n      return;\n    }\n    if (isPhoneExist) {\n      alert(`Number ${phone} is already in contacts`);\n      return;\n    }\n\n    dispatch(\n      editContact({\n        id: contact.id,\n        name,\n        number: phone,\n      })\n    );\n    handleClose();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <Typography variant=\"h6\" component=\"h1\">\n        Type new data for this contact\n      </Typography>\n      <Typography variant=\"subtitle1\" component=\"h2\">\n        {contact.name}: {contact.number}\n      </Typography>\n\n      <TextField\n        label=\"Name\"\n        variant=\"standard\"\n        name=\"name\"\n        fullWidth\n        margin=\"normal\"\n        value={name}\n        onChange={handleNameChange}\n        required\n      />\n      <BackspaceIcon\n        className={css.backspaceIconName}\n        onClick={() => setName('')}\n        style={{ display: name.length > 0 ? 'block' : 'none' }}\n      />\n      <TextField\n        label=\"Number\"\n        variant=\"standard\"\n        name=\"number\"\n        fullWidth\n        margin=\"normal\"\n        value={phone}\n        onChange={handleNumberChange}\n        required\n      />\n      <BackspaceIcon\n        className={css.backspaceIconPhone}\n        onClick={() => setPhone('')}\n        style={{ display: phone.length > 0 ? 'block' : 'none' }}\n      />\n\n      <Box className={css.buttons}>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n          Save changes\n          <SaveIcon sx={{ ml: 2 }} />\n        </Button>\n        <Button type=\"button\" variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n          Cancel\n          <CancelIcon sx={{ ml: 2 }} />\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nContactRedact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n  handleClose: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ContactListItem_modal__7e6HV\",\"item\":\"ContactListItem_item__JS8ki\",\"loading\":\"ContactListItem_loading__x-8Bc\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { ContactRedact } from 'components/ContactRedact/ContactRedact';\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport ListItem from '@mui/material/ListItem';\nimport IconButton from '@mui/material/IconButton';\nimport PersonIcon from '@mui/icons-material/Person';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport CallIcon from '@mui/icons-material/Call';\nimport EditIcon from '@mui/icons-material/Edit';\nimport Tooltip from '@mui/material/Tooltip';\nimport css from './ContactListItem.module.scss';\n\nexport const ContactListItem = ({ contact }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(contact.id));\n  };\n  const handleOpen = () => {\n    setIsModalOpen(true);\n  };\n  const handleClose = () => setIsModalOpen(false);\n\n  return (\n    <>\n      <Modal\n        open={isModalOpen}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n        disableScrollLock={true}\n      >\n        <Box className={css.modal}>\n          <ContactRedact contact={contact} handleClose={handleClose} />\n        </Box>\n      </Modal>\n\n      <ListItem className={clsx(css.item, isLoading && css.loading)}>\n        <PersonIcon sx={{ marginRight: 1 }} />\n        <Typography variant=\"subtitle1\">\n          {contact.name}: {contact.number}\n        </Typography>\n        <Tooltip title=\"Call to\" placement=\"bottom-start\" arrow>\n          <IconButton href={`tel:${contact.number}`}>\n            <CallIcon />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Edit\" placement=\"bottom-start\" arrow>\n          <IconButton onClick={handleOpen} sx={{ marginLeft: 'auto' }}>\n            <EditIcon />\n          </IconButton>\n        </Tooltip>\n        <Tooltip title=\"Delete\" placement=\"bottom-start\" arrow>\n          <IconButton onClick={handleDelete}>\n            <DeleteIcon />\n          </IconButton>\n        </Tooltip>\n      </ListItem>\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string,\n    phone: PropTypes.string,\n  }),\n};\n","import styles from './styles.module.css';\n// import { TiUserDeleteOutline } from 'react-icons/ti';\nimport {  useSelector } from 'react-redux';\n// import { deleteContact} from 'redux/contacts/operations';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\n// import userIcon from '../../images/user.png';\n// import telephoneIcon from '../../images/telephone.png';\nimport { Notification } from 'components/Notification/Notification';\nimport {\n  selectIsLoading,\n  selectFilteredContacts,\n selectFilter,\n  selectContactsCount,\n} from '../../redux/contacts/selectors';\n\n export const ContactList = () => {\n    // const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contactsCount = useSelector(selectContactsCount);\n  const filter = useSelector(selectFilter);\n  const filteredContacts = useSelector(selectFilteredContacts);\n \n \n \n  return (\n    <>\n        {!isLoading && contactsCount.total === 0 ? (\n        <Notification message=\"No contacts yet\" />\n      ) : filter !== '' && filteredContacts.length === 0 ? (\n        <Notification message=\"No contacts found\" />\n      ) : (\n      <ul className={styles.contactsList}>\n              {filteredContacts.map(({ name, id, number }) => (\n           <ContactListItem key={id} contact={{ id, name, number }} />\n          // <li className={styles.listItem} key={id} id={id}>\n          //     <img src={userIcon} alt=\"user icon\" className={styles.user_icon} />\n          //   <span className={styles.contactName}>{name}: </span>\n          //   <span className={styles.phoneNumber}>{phone}\n          //   <a href={`tel:${phone}`}>\n          //   <img src={telephoneIcon} alt=\"telephone icon\" className={styles.telephone_icon} />\n          //     </a>\n          //     </span>\n          //   <button\n          //     type=\"button\"\n          //     className={styles.buttons}\n          //     onClick={() => dispatch(deleteContact(id))}\n          //     aria-label=\"delete contact button\"\n          //   >\n          //     <TiUserDeleteOutline size={20} />\n          //   </button>\n          // </li>\n        ))}\n        </ul>\n              )}\n      \n    </>\n  );\n};\n\n\n\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Form } from '../components/Form/Form';\nimport { StatusBar } from '../components/StatusBar/StatusBar';\nimport { ContactList } from '../components/ContactList/ContactList';\n// import { Notification } from './Notification/Notification';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Form />\n      <StatusBar />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["Notification","message","variant","style","textAlign","selectContacts","state","contacts","items","selectFilter","filter","inputValue","selectIsLoading","isLoading","selectContactsCount","createSelector","reduce","count","contact","error","console","log","total","selectFilteredContacts","name","toLowerCase","includes","Form","dispatch","useDispatch","useSelector","onSubmit","evt","preventDefault","form","target","elements","number","contactName","value","contactNumber","length","some","Notify","reset","addContact","className","styles","type","placeholder","pattern","title","required","size","Filter","onChange","e","setFilter","currentTarget","disabled","onClick","src","clearIcon","alt","StatusBar","useState","sortedAlphabetically","sortedByDate","sorted","setSorted","sortContactsAzReverse","sortContactsAz","sortIcon","deleteAllContacts","trashIcon","ContactRedact","handleClose","setName","phone","setPhone","css","event","contactsWithoutCurrent","item","id","isContactExist","find","isPhoneExist","replace","alert","editContact","Typography","component","TextField","label","fullWidth","margin","Backspace","display","Box","Button","color","Save","sx","ml","Cancel","ContactListItem","isModalOpen","setIsModalOpen","Modal","open","onClose","disableScrollLock","ListItem","clsx","Person","marginRight","Tooltip","placement","arrow","IconButton","href","Call","marginLeft","Edit","deleteContact","Delete","ContactList","contactsCount","filteredContacts","map","useEffect","fetchContacts"],"sourceRoot":""}